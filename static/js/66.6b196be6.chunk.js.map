{"version":3,"file":"static/js/66.6b196be6.chunk.js","mappings":"uJAEO,MAAMA,EAAiBC,EAAAA,EAAAA,GAA+B;;;;;;;YAOjD,QAAC,OAAEC,GAAH,SAAgBA,CAAhB;;;;;;;;;;;EAYCC,EAAQF,EAAAA,EAAAA,GAIlB;;;;;;;;YAQS,QAAC,OAAEC,GAAH,SAAgBA,CAAhB;oBACQ,QAAC,WAAEE,GAAH,SAAoBA,CAApB;;;IAGhB,QAAC,KAAEC,GAAH,SAAcA,GAAQ,oBAAtB;6OCNW,SAASC,IAAS,IAAD,EAC9B,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,KACd,IACIC,GADSC,EAAAA,EAAAA,MACQD,QAGrB,MAAQE,KAAMC,KAAaC,IAAWC,EAAAA,EAAAA,IAASL,GAEzCM,GAAiBC,EAAAA,EAAAA,OAEjB,OAAEC,EAAF,MAAUC,EAAV,YAAiBC,IAAgBC,EAAAA,EAAAA,UAAQ,IAE1CR,GAAY,CACXK,OAAQF,EAAe,cAAeH,GACtCM,MAAOH,EAAe,QAASH,GAC/BO,YAAaJ,EAAe,cAAeH,KAE7C,CAAC,GAEF,CAACG,EAAgBH,IAEdS,GAAaC,EAAAA,EAAAA,KACbC,GAAcC,EAAAA,EAAAA,KACjBC,GAAYA,EAAQC,SAASH,cAK4B,IAAD,EAA3D,OAAIV,EAAOc,QAAS,OAACd,QAAD,IAACA,GAAD,UAACA,EAAQc,aAAT,eAAwBd,SAAU,KAElD,SAAC,KAAD,CAAKe,GAAG,OAAOC,GAAI,EAAnB,UACE,SAAC,KAAD,CAAQC,KAAK,QAAQC,GAAI,GAAzB,UACE,UAAC,KAAD,CAAQC,QAAS,EAAjB,WACE,SAAC,KAAD,UACGzB,EACC,oEAGJ,SAAC,KAAD,iBAAQM,QAAR,IAAQA,GAAR,UAAQA,EAAQc,aAAhB,aAAO,EAA0BM,oBAOtCrB,GAMH,UAAC,IAAD,YACE,SAAC,KAAD,WACE,6BAAQM,GAASX,EAAE,qBAAnB,0BAEF,SAAC,IAAD,CAAgBL,OAAO,QAAvB,UACE,SAAC,IAAD,CAAOE,WAAYa,GAAU,GAAIf,OAAO,aAE1C,UAAC,EAAAgC,EAAD,CAAgBC,GAAG,KAAnB,WACE,SAAC,IAAD,CACEvB,SAAUA,EACVM,MAAOA,GAASX,EAAE,qBAClBY,YAAaA,GAAe,GAC5BiB,MAAO,KAET,SAAC,IAAD,CACEC,GAAI,EACJzB,SAAUA,EACV0B,YAAa,CAAC,aAAc,SAAU,QACtCC,SAAS,EACTC,UAAU,EACVC,YAAa,KACXlB,EAAY,CAAEX,YAAd,EAEF8B,gBAAiB,KACf9B,EAAS+B,SACPtB,EAAW,CACTuB,MAAO,IAAIhC,EAAS+B,SACpBE,iBAAiB,GAHrB,IAQHjC,EAAS+B,UAAW,SAAC,IAAD,CAAW/B,SAAUA,EAAUkC,aAAW,WApCjE,SAAC,IAAD,CAAaC,YAAalC,EAAQX,OAAO,OAAO8C,eAAe,UAwCpE,C","sources":["components/layout/BGImgContainer.tsx","pages/Radio.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const BGImgContainer = styled.div<{ height: string }>`\n  width: 100%;\n  position: absolute;\n  z-index: 0;\n  pointer-events: none;\n  left: 0px;\n  top: 0px;\n  height: ${({ height }) => height};\n  mask-image: radial-gradient(\n    ellipse farthest-side at 33% 12%,\n    rgba(0, 0, 0, 1) 0%,\n    rgba(0, 0, 0, 0.63) 48%,\n    rgba(0, 0, 0, 0.58) 74%,\n    rgba(0, 0, 0, 0) 100%\n  );\n  mask-size: 150% 132%;\n  mask-position: left bottom;\n  overflow: hidden;\n`;\nexport const BGImg = styled.div<{\n  banner_url: string;\n  height: string;\n  blur?: boolean;\n}>`\n  width: 105%;\n  width: calc(100% + 16px);\n  position: absolute;\n  pointer-events: none;\n  z-index: 0;\n  left: -8px;\n  top: -8px;\n  height: ${({ height }) => height};\n  background: url(${({ banner_url }) => banner_url});\n  background-position: center;\n  background-size: cover;\n  ${({ blur }) => blur && \"filter: blur(8px);\"}\n`;\n","import { Box, Center, Code, Heading, useToast, VStack } from \"@chakra-ui/react\";\nimport React, {\n  Suspense,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useTranslation } from \"react-i18next\";\nimport { useParams } from \"react-router-dom\";\nimport { QueryStatus } from \"../components/common/QueryStatus\";\nimport { SongTable } from \"../components/data/SongTable\";\nimport { BGImg, BGImgContainer } from \"../components/layout/BGImgContainer\";\nimport { ContainerInlay } from \"../components/layout/ContainerInlay\";\nimport { PageContainer } from \"../components/layout/PageContainer\";\nimport { PlaylistButtonArray } from \"../components/playlist/PlaylistButtonArray\";\nimport { PlaylistHeading } from \"../components/playlist/PlaylistHeading\";\nimport { useClient } from \"../modules/client\";\nimport { useFormatPlaylist } from \"../modules/playlist/useFormatPlaylist\";\nimport {\n  usePlaylist,\n  usePlaylistWriter,\n  useRadio,\n} from \"../modules/services/playlist.service\";\nimport { useStoreActions } from \"../store\";\nimport { useSongQueuer } from \"../utils/SongQueuerHook\";\nconst SongEditableTable = React.lazy(\n  () => import(\"../components/data/SongTableEditable\"),\n);\n\nexport default function Radio() {\n  const { t } = useTranslation();\n  let params = useParams();\n  let radioId = params.radioId!;\n  // let { user, isLoggedIn } = useClient();\n\n  const { data: playlist, ...status } = useRadio(radioId);\n\n  const formatPlaylist = useFormatPlaylist();\n\n  const { banner, title, description } = useMemo(() => {\n    return (\n      (playlist && {\n        banner: formatPlaylist(\"bannerImage\", playlist),\n        title: formatPlaylist(\"title\", playlist),\n        description: formatPlaylist(\"description\", playlist),\n      }) ||\n      {}\n    );\n  }, [formatPlaylist, playlist]);\n\n  const queueSongs = useSongQueuer();\n  const setPlaylist = useStoreActions(\n    (actions) => actions.playback.setPlaylist,\n  );\n\n  // const bgColor = useColorModeValue(\"bgAlpha.50\", \"bgAlpha.900\");\n\n  if (status.error && (status?.error as any)?.status >= 400) {\n    return (\n      <Box pt=\"10vh\" px={6}>\n        <Center role=\"alert\" my={10}>\n          <VStack spacing={4}>\n            <Heading>\n              {t(\n                \"You do not have access to this playlist (or it doesn't exist)\",\n              )}\n            </Heading>\n            <Code>{(status?.error as Error)?.toString()}</Code>\n          </VStack>\n        </Center>\n      </Box>\n    );\n  }\n\n  if (!playlist)\n    return (\n      <QueryStatus queryStatus={status} height=\"100%\" justifyContent=\"center\" />\n    );\n\n  return (\n    <PageContainer>\n      <Helmet>\n        <title>{title || t(\"Untitled Playlist\")} - Musicdex Radio</title>\n      </Helmet>\n      <BGImgContainer height=\"200px\">\n        <BGImg banner_url={banner || \"\"} height=\"200px\"></BGImg>\n      </BGImgContainer>\n      <ContainerInlay mt=\"12\">\n        <PlaylistHeading\n          playlist={playlist}\n          title={title || t(\"Untitled Playlist\")}\n          description={description || \"\"}\n          count={0}\n        />\n        <PlaylistButtonArray\n          mb={2}\n          playlist={playlist}\n          hideElement={[\"addToQueue\", \"delete\", \"edit\"]}\n          canEdit={false}\n          editMode={false}\n          onPlayClick={() => {\n            setPlaylist({ playlist });\n          }}\n          onAddQueueClick={() => {\n            playlist.content &&\n              queueSongs({\n                songs: [...playlist.content],\n                immediatelyPlay: false,\n              });\n          }}\n        />\n\n        {playlist.content && <SongTable playlist={playlist} virtualized />}\n      </ContainerInlay>\n    </PageContainer>\n  );\n}\n"],"names":["BGImgContainer","styled","height","BGImg","banner_url","blur","Radio","t","useTranslation","radioId","useParams","data","playlist","status","useRadio","formatPlaylist","useFormatPlaylist","banner","title","description","useMemo","queueSongs","useSongQueuer","setPlaylist","useStoreActions","actions","playback","error","pt","px","role","my","spacing","toString","C","mt","count","mb","hideElement","canEdit","editMode","onPlayClick","onAddQueueClick","content","songs","immediatelyPlay","virtualized","queryStatus","justifyContent"],"sourceRoot":""}