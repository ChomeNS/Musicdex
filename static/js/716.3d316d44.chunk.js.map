{"version":3,"file":"static/js/716.3d316d44.chunk.js","mappings":"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","sources":["components/data/SongTableEditable.tsx"],"sourcesContent":["/**\n * Song table editable is a React-Tables supported table. It's only used when editing the songs...\n *\n */\nimport {\n  CSSObject,\n  Icon,\n  IconButton,\n  Table,\n  Tbody,\n  Td,\n  Text,\n  Th,\n  Thead,\n  Tr,\n  useBreakpoint,\n  useBreakpointValue,\n  useColorModeValue,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport {\n  DragDropContext,\n  Draggable,\n  DraggableProvided,\n  DraggableStateSnapshot,\n  Droppable,\n  DroppableProvided,\n  DropResult,\n} from \"react-beautiful-dnd\";\nimport { useTranslation } from \"react-i18next\";\nimport { FaChevronDown, FaChevronUp } from \"react-icons/fa\";\nimport { FiTrash } from \"react-icons/fi\";\nimport { Column, useSortBy, useTable } from \"react-table\";\nimport useNamePicker from \"../../modules/common/useNamePicker\";\nimport { SangOnGrid } from \"./SongTable/SangOnCell\";\n\ntype IndexedSong = Song & { idx: number };\n\ninterface SongEditableTableProps {\n  songs: Song[];\n  songsEdited: (songIds: string[]) => void;\n}\n\nconst SongEditableTable = ({ songs, songsEdited }: SongEditableTableProps) => {\n  const { t } = useTranslation();\n  const tn = useNamePicker();\n  const [newSongs, setNewSongs] = useState<IndexedSong[]>(() =>\n    songs.map((song, idx) => ({\n      ...song,\n      idx,\n    }))\n  );\n\n  const moveOrDeleteItem = useCallback(\n    (idx: number, toIdx: number | undefined) => {\n      // console.log(newSongIds);\n      // console.log(idx, toIdx);\n\n      const arrayAroundDragged = [\n        ...newSongs.slice(0, idx),\n        ...newSongs.slice(idx + 1),\n      ];\n      if (toIdx !== undefined)\n        arrayAroundDragged.splice(toIdx, 0, newSongs[idx]);\n      setNewSongs(arrayAroundDragged);\n      songsEdited(arrayAroundDragged.map((x) => x.id));\n      // console.log(arrayAroundDragged);\n    },\n    [newSongs, songsEdited]\n  );\n\n  const columns: Column<IndexedSong>[] = useMemo<Column<IndexedSong>[]>(\n    () => [\n      {\n        Header: \"#\",\n        accessor: \"idx\",\n        maxWidth: 40,\n        Cell: (cellInfo: any) => <>{String(cellInfo.row.index + 1)}</>,\n      },\n      {\n        Header: \"Title\",\n        accessor: \"name\",\n        Cell: (cellInfo: any) => {\n          // console.log(cellInfo);\n          return (\n            <VStack alignItems=\"start\" spacing={1}>\n              <span>{cellInfo.row.original?.name}</span>\n              <Text color=\"whiteAlpha.600\" fontWeight={300} fontSize=\"sm\">\n                {tn(\n                  cellInfo.row.original.channel?.english_name,\n                  cellInfo.row.original.channel?.name\n                )}\n              </Text>\n            </VStack>\n          );\n        },\n      },\n      {\n        id: \"channel\",\n        Header: \"ChannelName\",\n        accessor: (row: IndexedSong) =>\n          tn(row.channel?.english_name, row.channel?.name),\n      },\n      {\n        Header: \"Original Artist\",\n        accessor: \"original_artist\",\n      },\n      {\n        id: \"dur\",\n        Header: \"Duration\",\n        accessor: (row: { end: number; start: number }) => {\n          return row.end - row.start;\n        },\n        isNumeric: true,\n      },\n      {\n        id: \"date\",\n        Header: \"Sang On\",\n        accessor: \"available_at\",\n        Cell: (cellInfo: any) => (\n          <SangOnGrid value={new Date(cellInfo.row.original.available_at)} />\n        ),\n      },\n      {\n        id: \"...\",\n        Header: \"\",\n        disableSortBy: true,\n        accessor: \"idx\",\n        Cell: (cellInfo: any) => {\n          // console.log(cellInfo);\n          return (\n            <IconButton\n              onClick={() => {\n                moveOrDeleteItem(cellInfo.row.index, undefined);\n              }}\n              variant=\"outline\"\n              aria-label=\"delete\"\n              colorScheme=\"red\"\n              icon={<FiTrash />}\n            />\n          );\n        },\n      },\n    ],\n    [tn, moveOrDeleteItem]\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    toggleHideColumn,\n  } = useTable(\n    {\n      columns: columns as any,\n      data: newSongs,\n      initialState: { hiddenColumns: [\"channel\"] },\n      disableSortBy: true,\n      //   getRowId: (or, idx) => idx.toString(),\n    },\n    useSortBy\n  );\n\n  const breakpointValue =\n    useBreakpointValue({ base: 0, xs: 0, sm: 1, md: 2, lg: 2, xl: 3 }, \"xl\") ||\n    0;\n\n  useEffect(() => {\n    toggleHideColumn(\"original_artist\", breakpointValue < 2);\n    toggleHideColumn(\"dur\", breakpointValue < 2);\n    // toggleHideColumn(\"idx\", !isXL);\n  }, [breakpointValue, toggleHideColumn]);\n\n  const HOVER_ROW_STYLE: CSSObject = {\n    backgroundColor: useColorModeValue(\"bgAlpha.200\", \"bgAlpha.800\"),\n  };\n\n  const onDragEnd = (result: DropResult) => {\n    // dropped outside the list\n    if (\n      !result.destination ||\n      result.destination.index === result.source.index\n    ) {\n      return;\n    }\n\n    // no movement\n    if (result.destination.index === result.source.index) {\n      return;\n    }\n\n    moveOrDeleteItem(result.source.index, result.destination.index);\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Table {...getTableProps()} size={breakpointValue > 2 ? \"md\" : \"sm\"}>\n        <Thead>\n          {headerGroups.map((headerGroup) => (\n            <Tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <Th\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                  isNumeric={(column as any).isNumeric}\n                  px={breakpointValue}\n                >\n                  {column.isSorted &&\n                    (column.isSortedDesc ? (\n                      <Icon as={FaChevronDown} display=\"inline\" mr=\"2\" />\n                    ) : (\n                      <Icon as={FaChevronUp} display=\"inline\" mr=\"2\" />\n                    ))}\n                  {column.render(\"Header\")}\n                </Th>\n              ))}\n            </Tr>\n          ))}\n        </Thead>\n        <Droppable droppableId=\"table\">\n          {(droppableProvided: DroppableProvided) => (\n            <Tbody\n              {...getTableBodyProps()}\n              {...droppableProvided.droppableProps}\n              ref={(ref: HTMLElement | null) => {\n                droppableProvided.innerRef(ref);\n              }}\n            >\n              {rows.map((row, index) => {\n                prepareRow(row);\n                return (\n                  <Draggable\n                    draggableId={\"d\" + row.original.idx}\n                    index={index}\n                    key={\"dk\" + row.original.idx}\n                  >\n                    {(\n                      provided: DraggableProvided,\n                      snapshot: DraggableStateSnapshot\n                    ) => (\n                      <Tr\n                        {...row.getRowProps()}\n                        _hover={HOVER_ROW_STYLE}\n                        ref={provided.innerRef}\n                        // isDragging={snapshot.isDragging}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                      >\n                        {row.cells.map(\n                          (cell) =>\n                            !(\n                              snapshot.isDragging &&\n                              cell.column.id !== \"name\" &&\n                              cell.column.id !== \"idx\"\n                            ) && (\n                              <Td\n                                {...cell.getCellProps()}\n                                isNumeric={(cell.column as any).isNumeric}\n                                {...{\n                                  width:\n                                    cell.column.id === \"idx\" ? \"40px\" : \"auto\",\n                                }}\n                                {...(snapshot.isDragging && {\n                                  width:\n                                    cell.column.id === \"idx\" ? \"40px\" : \"100vw\",\n                                })}\n                                px={breakpointValue}\n                              >\n                                {cell.render(\"Cell\")}\n                              </Td>\n                            )\n                        )}\n                      </Tr>\n                    )}\n                  </Draggable>\n                );\n              })}\n              {droppableProvided.placeholder}\n            </Tbody>\n          )}\n        </Droppable>\n      </Table>\n    </DragDropContext>\n  );\n};\n\nexport default SongEditableTable;\n"],"names":["songs","songsEdited","t","useTranslation","tn","useNamePicker","newSongs","setNewSongs","useState","map","song","idx","moveOrDeleteItem","useCallback","toIdx","arrayAroundDragged","slice","undefined","splice","x","id","columns","useMemo","Header","accessor","maxWidth","Cell","cellInfo","String","row","index","alignItems","spacing","original","name","color","fontWeight","fontSize","channel","english_name","end","start","isNumeric","value","Date","available_at","disableSortBy","onClick","variant","colorScheme","icon","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","toggleHideColumn","useTable","data","initialState","hiddenColumns","useSortBy","breakpointValue","useBreakpointValue","base","xs","sm","md","lg","xl","useEffect","HOVER_ROW_STYLE","backgroundColor","useColorModeValue","onDragEnd","result","destination","source","size","headerGroup","Tr","getHeaderGroupProps","headers","column","Th","getHeaderProps","getSortByToggleProps","px","isSorted","isSortedDesc","as","FaChevronDown","display","mr","FaChevronUp","render","droppableId","droppableProvided","droppableProps","ref","innerRef","draggableId","provided","snapshot","getRowProps","_hover","draggableProps","dragHandleProps","cells","cell","isDragging","Td","getCellProps","width","placeholder"],"sourceRoot":""}