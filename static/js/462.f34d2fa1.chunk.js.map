{"version":3,"file":"static/js/462.f34d2fa1.chunk.js","mappings":"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","sources":["components/search/GeneralSearchInput.tsx","components/search/CheckboxSearchList.tsx","components/search/RadioButtonSearchList.tsx","components/search/ToggleButtonSearchInput.tsx","pages/Search.tsx","store/adhoc.ts"],"sourcesContent":["import {\n  IconButton,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Tag,\n} from \"@chakra-ui/react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { RiSearch2Line } from \"react-icons/ri\";\nimport { useDebounce } from \"use-debounce\";\n\ninterface GeneralInputProps {\n  debounceValue?: number;\n  placeholder?: string;\n  getQuery: (q: string) => object;\n  setQuery: (query: { value?: string; query?: any; opts?: any }) => void;\n  value: string | null;\n  tagLabel?: string;\n  autoFocus?: boolean;\n}\n\nexport const GeneralSearchInput = ({\n  debounceValue = 1000,\n  placeholder,\n  getQuery,\n  setQuery,\n  value,\n  tagLabel,\n  autoFocus,\n}: GeneralInputProps) => {\n  const { t } = useTranslation();\n  const [searchText, setSearchText] = useState<string>(value || \"\");\n  const [debouncedSearchText, { flush }] = useDebounce(\n    searchText,\n    debounceValue,\n  );\n\n  useEffect(() => {\n    setQuery({\n      value: debouncedSearchText,\n      query: getQuery(debouncedSearchText),\n    });\n  }, [debouncedSearchText, getQuery, setQuery]);\n\n  // Support resetting from SelectedFilters\n  useEffect(() => {\n    setSearchText(value || \"\");\n  }, [value]);\n\n  const changed = useCallback(\n    (e: any) => {\n      setSearchText(e.target.value);\n    },\n    [setSearchText],\n  );\n\n  return (\n    <>\n      {tagLabel && (\n        <Tag colorScheme=\"brand\" size=\"md\" alignSelf=\"start\">\n          {tagLabel}\n        </Tag>\n      )}\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          flush();\n        }}\n      >\n        <InputGroup>\n          <Input\n            value={searchText}\n            onChange={changed}\n            placeholder={placeholder}\n            autoFocus={autoFocus}\n          ></Input>\n          <InputRightElement>\n            <IconButton\n              color=\"brand.400\"\n              colorScheme=\"brand\"\n              size=\"sm\"\n              variant=\"ghost\"\n              aria-label={t(\"Search\")}\n              icon={<RiSearch2Line />}\n              type=\"submit\"\n              title={t(\"Search\")}\n            ></IconButton>\n          </InputRightElement>\n        </InputGroup>\n      </form>\n    </>\n  );\n};\n","import {\n  Checkbox,\n  CheckboxGroup,\n  IconButton,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Tag,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { RiCloseFill } from \"react-icons/ri\";\n\ninterface CheckboxSearchListProps {\n  dataField: string;\n  placeholder?: string;\n  showSearch?: boolean;\n  aggregations: {\n    [k: string]: { buckets: Array<{ key: string; doc_count: number }> };\n  };\n  setQuery: (query: any) => void;\n  value: string[] | null;\n  tagLabel?: string;\n}\n\nexport const CheckboxSearchList = ({\n  dataField,\n  placeholder,\n  showSearch = false,\n  aggregations,\n  setQuery,\n  value,\n  tagLabel,\n}: CheckboxSearchListProps) => {\n  const { t } = useTranslation();\n  const [filterValue, setFilterValue] = useState(\"\");\n  const [checkboxValues, setCheckboxValues] = useState<Array<string | number>>(\n    value!,\n  );\n\n  const getTermsQuery = useCallback(\n    (values: typeof checkboxValues) => {\n      if (!values?.length) return {};\n\n      return { query: { terms: { [dataField]: values } } };\n    },\n    [dataField],\n  );\n\n  useEffect(() => {\n    setQuery({\n      value: checkboxValues,\n      query: getTermsQuery(checkboxValues),\n    });\n  }, [checkboxValues, getTermsQuery, setQuery]);\n\n  // Support resetting from SelectedFilters\n  useEffect(() => {\n    setCheckboxValues(value || []);\n  }, [value]);\n\n  if (!aggregations?.[dataField]?.buckets?.length) {\n    return null;\n  }\n\n  return (\n    <>\n      {tagLabel && (\n        <Tag colorScheme=\"brand\" size=\"md\" alignSelf=\"start\">\n          {tagLabel}\n        </Tag>\n      )}\n      {showSearch && (\n        <InputGroup>\n          <Input\n            value={filterValue}\n            onChange={(e) => setFilterValue(e.target.value)}\n            placeholder={placeholder!}\n          />\n          <InputRightElement>\n            {filterValue && (\n              <IconButton\n                color=\"red.400\"\n                colorScheme=\"red\"\n                size=\"sm\"\n                variant=\"ghost\"\n                aria-label={t(\"Clear\")}\n                icon={<RiCloseFill />}\n                type=\"button\"\n                title={t(\"Clear\")}\n                onClick={() => setFilterValue(\"\")}\n              ></IconButton>\n            )}\n          </InputRightElement>\n        </InputGroup>\n      )}\n      <CheckboxGroup\n        value={checkboxValues}\n        onChange={(e) => setCheckboxValues(e)}\n      >\n        <VStack maxH=\"200px\" alignItems=\"stretch\" overflowY=\"scroll\" p={2}>\n          {aggregations?.[dataField]?.buckets\n            ?.filter(({ key }) =>\n              key.toLowerCase().includes(filterValue.toLowerCase()),\n            )\n            .map(({ key }) => (\n              <Checkbox key={key} value={key}>\n                {key}\n              </Checkbox>\n            ))}\n        </VStack>\n      </CheckboxGroup>\n    </>\n  );\n};\n","import {\n  Radio,\n  RadioGroup,\n  Input,\n  VStack,\n  Tag,\n  InputRightElement,\n  InputGroup,\n  IconButton,\n} from \"@chakra-ui/react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { RiCloseFill } from \"react-icons/ri\";\n\ninterface RadioButtonSearchListProps {\n  dataField: string;\n  placeholder?: string;\n  showSearch?: boolean;\n  aggregations: {\n    [k: string]: { buckets: Array<{ key: string; doc_count: number }> };\n  };\n  setQuery: (query: any) => void;\n  value: string | null;\n  tagLabel?: string;\n}\n\nexport const RadioButtonSearchList = ({\n  dataField,\n  placeholder,\n  showSearch = false,\n  aggregations,\n  setQuery,\n  value,\n  tagLabel,\n}: RadioButtonSearchListProps) => {\n  const { t } = useTranslation();\n  const [filterValue, setFilterValue] = useState(\"\");\n  const [radioValue, setRadioValue] = useState<string>(value!);\n\n  const getQuery = useCallback(\n    (value: string) => {\n      if (!value) return {};\n\n      return { query: { term: { [dataField]: value } } };\n    },\n    [dataField],\n  );\n\n  useEffect(() => {\n    setQuery({\n      value: radioValue,\n      query: getQuery(radioValue),\n    });\n  }, [radioValue, getQuery, setQuery]);\n\n  // Support resetting from SelectedFilters\n  useEffect(() => {\n    setRadioValue(value || \"\");\n  }, [value]);\n\n  if (!aggregations?.[dataField]?.buckets?.length) {\n    return null;\n  }\n\n  return (\n    <>\n      {tagLabel && (\n        <Tag colorScheme=\"brand\" size=\"md\" alignSelf=\"start\">\n          {tagLabel}\n        </Tag>\n      )}\n      {showSearch && (\n        <InputGroup>\n          <Input\n            value={filterValue}\n            onChange={(e) => setFilterValue(e.target.value)}\n            placeholder={placeholder!}\n          />\n          <InputRightElement>\n            {filterValue && (\n              <IconButton\n                color=\"red.400\"\n                colorScheme=\"red\"\n                size=\"sm\"\n                variant=\"ghost\"\n                aria-label={t(\"Clear\")}\n                icon={<RiCloseFill />}\n                type=\"button\"\n                title={t(\"Clear\")}\n                onClick={() => setFilterValue(\"\")}\n              ></IconButton>\n            )}\n          </InputRightElement>\n        </InputGroup>\n      )}\n      <RadioGroup value={radioValue} onChange={(value) => setRadioValue(value)}>\n        <VStack maxH=\"200px\" alignItems=\"stretch\" overflowY=\"scroll\" p={2}>\n          {aggregations?.[dataField]?.buckets\n            ?.filter(({ key }) =>\n              key.toLowerCase().includes(filterValue.toLowerCase()),\n            )\n            .map(({ key }) => (\n              <Radio key={key} value={key}>\n                {key}\n              </Radio>\n            ))}\n        </VStack>\n      </RadioGroup>\n    </>\n  );\n};\n","import { Button, HStack, Tag } from \"@chakra-ui/react\";\nimport { ReactElement, useCallback, useEffect, useState } from \"react\";\n\ninterface ToggleButtonSearchInputProps {\n  dataField: string;\n  buttons: Array<{ label: string; value: string; icon?: ReactElement }>;\n  setQuery: (query: { value?: string; query?: any; opts?: any }) => void;\n  value: string | null;\n  tagLabel?: string;\n}\n\nexport const ToggleButtonSearchInput = ({\n  dataField,\n  setQuery,\n  value,\n  buttons,\n  tagLabel,\n}: ToggleButtonSearchInputProps) => {\n  const [buttonValue, setButtonValue] = useState<string>(value!);\n\n  const getQuery = useCallback(\n    (value: string) => {\n      if (!value) return {};\n\n      return { query: { term: { [dataField]: value } } };\n    },\n    [dataField],\n  );\n\n  useEffect(() => {\n    setQuery({\n      value: buttonValue,\n      query: getQuery(buttonValue),\n    });\n  }, [buttonValue, getQuery, setQuery]);\n\n  // Support resetting from SelectedFilters\n  useEffect(() => {\n    setButtonValue(value || \"\");\n  }, [value]);\n\n  return (\n    <>\n      {tagLabel && (\n        <Tag colorScheme=\"brand\" size=\"md\" alignSelf=\"start\">\n          {tagLabel}\n        </Tag>\n      )}\n      <HStack>\n        {buttons.map(({ label, value, icon }) => {\n          return (\n            <Button\n              key={`search-${label}-btn`}\n              colorScheme=\"brand\"\n              variant={buttonValue === value ? \"solid\" : \"outline\"}\n              rightIcon={icon}\n              title={label}\n              onClick={() =>\n                setButtonValue((currentValue: string) =>\n                  currentValue === value ? \"\" : value,\n                )\n              }\n            >\n              {label}\n            </Button>\n          );\n        })}\n      </HStack>\n    </>\n  );\n};\n","import {\n  ReactiveBase,\n  ReactiveComponent,\n  ReactiveList,\n  SelectedFilters,\n} from \"@appbaseio/reactivesearch\";\nimport {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Flex,\n  Heading,\n  Progress,\n  useBreakpointValue,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { BiMovie, BiMoviePlay } from \"react-icons/bi\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { SongTable, SongTableCol } from \"../components/data/SongTable\";\nimport \"./Search.css\";\nimport { GeneralSearchInput } from \"../components/search/GeneralSearchInput\";\nimport { CheckboxSearchList } from \"../components/search/CheckboxSearchList\";\nimport { RadioButtonSearchList } from \"../components/search/RadioButtonSearchList\";\nimport { ToggleButtonSearchInput } from \"../components/search/ToggleButtonSearchInput\";\nimport { useLocalStorage } from \"../store/adhoc\";\n\nconst debounceValue = 1000;\n\nconst SearchResultSongTable = ({\n  data,\n  loading,\n}: {\n  data: any;\n  loading: any;\n}) => {\n  const detailLevel = useBreakpointValue<SongTableCol[] | undefined>(\n    {\n      sm: [\"idx\", \"og_artist\", \"sang_on\", \"duration\"],\n      md: [\"idx\", \"og_artist\", \"sang_on\"],\n      lg: [\"idx\", \"og_artist\"],\n      xl: [],\n    },\n    \"xl\",\n  );\n  return (\n    <>\n      <Progress\n        size=\"xs\"\n        isIndeterminate\n        visibility={loading ? \"visible\" : \"hidden\"}\n        mt={1}\n      />\n      {data && (\n        <SongTable\n          songs={data}\n          rowProps={{ hideCol: detailLevel }}\n          width=\"100%\"\n          flexGrow={1}\n        />\n      )}\n    </>\n  );\n};\n\nexport default function Search() {\n  const { t } = useTranslation();\n  const sortOptions = useMemo(\n    () => [\n      { dataField: \"_score\", sortBy: \"desc\", label: t(\"Relevance\") },\n      { dataField: \"available_at\", sortBy: \"desc\", label: t(\"Latest\") },\n      { dataField: \"available_at\", sortBy: \"asc\", label: t(\"Oldest\") },\n    ],\n    [t],\n  );\n  const [defaultSort, setDefaultSort] = useLocalStorage(\n    \"defaultSort\",\n    t(\"Relevance\"),\n  );\n  const defaultSortField = useMemo(() => {\n    return (\n      sortOptions.find((x) => x.label === defaultSort)?.label ||\n      sortOptions[0].label\n    );\n  }, [sortOptions, defaultSort]);\n  const [suborgVisible, setSuborgVisible] = useState(false);\n  const navigate = useNavigate();\n  const [channelSelected, setChannelSelected] = useState(false);\n  const flexWrap: \"nowrap\" | \"wrap\" | undefined = useBreakpointValue({\n    base: \"wrap\",\n    sm: \"wrap\",\n    xs: \"wrap\",\n    md: \"nowrap\",\n    lg: \"nowrap\",\n    xl: \"nowrap\",\n  });\n\n  // this system sets up some loose reactivity regarding org and suborg block visibility.\n  const [params] = useSearchParams();\n  useEffect(() => {\n    const ch = params.get(\"ch\");\n    const org = params.get(\"org\");\n\n    setChannelSelected(!!ch);\n    setSuborgVisible(!!org);\n  }, [params]);\n\n  const getGeneralQuery = useCallback((value: string) => {\n    if (!value) return {};\n\n    return {\n      query: {\n        multi_match: {\n          query: value,\n          fields: [\"general^2\", \"general.ngram\", \"general.romaji\"],\n          type: \"most_fields\",\n          // type: \"phrase\",\n        },\n      },\n    };\n  }, []);\n\n  const getSongQuery = useCallback((value: string) => {\n    if (!value) return {};\n\n    return {\n      query: {\n        multi_match: {\n          query: value,\n          fields: [\"name.ngram^2\", \"name^2\", \"name.romaji\"],\n          type: \"phrase\",\n        },\n      },\n    };\n  }, []);\n\n  const getArtistQuery = useCallback((value: string) => {\n    if (!value) return {};\n\n    return {\n      query: {\n        multi_match: {\n          query: value,\n          fields: [\n            \"original_artist.ngram^2\",\n            \"original_artist^2\",\n            \"original_artist.romaji\",\n          ],\n          type: \"phrase\",\n        },\n      },\n    };\n  }, []);\n\n  return (\n    <ReactiveBase\n      className=\"m-search\"\n      app=\"songs_db\"\n      url={window.location.origin + \"/api/v2/musicdex/elasticsearch\"}\n      transformRequest={({ url, ...req }) => {\n        req.url = \"/api/v2/musicdex/elasticsearch/search\";\n        return req;\n      }}\n      themePreset=\"dark\"\n      setSearchParams={(newURL) => {\n        navigate({ search: new URL(newURL).search });\n      }}\n      enableAppbase={false}\n    >\n      <Flex alignItems=\"stretch\" wrap={flexWrap} mt={4}>\n        <VStack\n          minW=\"200px\"\n          className=\"m-filters\"\n          alignItems=\"stretch\"\n          px={2}\n          flexGrow={1}\n          flexBasis=\"300px\"\n          spacing={2}\n          mr={3}\n        >\n          <ReactiveComponent\n            componentId=\"q\"\n            URLParams\n            filterLabel=\"Search\"\n            customQuery={getGeneralQuery}\n            render={(props) => (\n              <GeneralSearchInput\n                debounceValue={debounceValue}\n                placeholder={t(\"Search for Music / Artist\")}\n                getQuery={getGeneralQuery}\n                autoFocus\n                {...props}\n              />\n            )}\n            onError={(e) => console.error(e)}\n          />\n          <Accordion allowToggle defaultIndex={0}>\n            <AccordionItem>\n              <AccordionButton>\n                <Heading flex=\"1\" textAlign=\"center\" size=\"sm\">\n                  {t(\"Advanced Filters\")}\n                </Heading>\n                <AccordionIcon />\n              </AccordionButton>\n              <AccordionPanel p={0}>\n                <VStack alignItems=\"stretch\" flexGrow={1} spacing={2}>\n                  <ReactiveComponent\n                    componentId=\"isMv\"\n                    filterLabel={t(\"Is MV\")}\n                    URLParams\n                    render={(props) => (\n                      <ToggleButtonSearchInput\n                        dataField=\"is_mv\"\n                        tagLabel={t(\"Type\")}\n                        buttons={[\n                          { label: t(\"MV\"), value: \"true\", icon: <BiMovie /> },\n                          {\n                            label: t(\"Stream\"),\n                            value: \"false\",\n                            icon: <BiMoviePlay />,\n                          },\n                        ]}\n                        {...props}\n                      />\n                    )}\n                    onError={(e) => console.error(e)}\n                  />\n\n                  <ReactiveComponent\n                    componentId=\"song\"\n                    URLParams\n                    filterLabel={t(\"Song Name\")}\n                    customQuery={getSongQuery}\n                    render={(props) => (\n                      <GeneralSearchInput\n                        placeholder={t(\"Song Name\")}\n                        debounceValue={debounceValue}\n                        getQuery={getSongQuery}\n                        tagLabel={t(\"Song\")}\n                        {...props}\n                      />\n                    )}\n                    onError={(e) => console.error(e)}\n                  />\n                  <ReactiveComponent\n                    componentId=\"artist\"\n                    URLParams\n                    filterLabel={t(\"Original Artist\")}\n                    customQuery={getArtistQuery}\n                    render={(props) => (\n                      <GeneralSearchInput\n                        placeholder={t(\"Original Artist Name\")}\n                        debounceValue={debounceValue}\n                        getQuery={getArtistQuery}\n                        tagLabel={t(\"Artist\")}\n                        {...props}\n                      />\n                    )}\n                    onError={(e) => console.error(e)}\n                  />\n\n                  <ReactiveComponent\n                    componentId=\"ch\"\n                    filterLabel={t(\"Channel\")}\n                    URLParams\n                    react={{ and: [\"q\", \"song\", \"artist\", \"isMv\", \"org\"] }}\n                    defaultQuery={() => ({\n                      aggs: {\n                        \"channel.name\": {\n                          terms: {\n                            field: \"channel.name\",\n                            size: 12,\n                            order: { _count: \"desc\" },\n                          },\n                        },\n                      },\n                    })}\n                    render={(props) => {\n                      // setChannelSelected(props.value?.length > 0);\n                      return (\n                        <CheckboxSearchList\n                          dataField=\"channel.name\"\n                          placeholder={t(\"Channel name\")}\n                          tagLabel={t(\"Channel\")}\n                          showSearch\n                          {...props}\n                        />\n                      );\n                    }}\n                    onError={(e) => console.error(e)}\n                  />\n                  {!channelSelected && (\n                    <ReactiveComponent\n                      componentId=\"org\"\n                      filterLabel={t(\"Org\")}\n                      URLParams\n                      react={{ and: [\"q\", \"song\", \"artist\", \"isMv\"] }}\n                      defaultQuery={() => ({\n                        aggs: {\n                          org: {\n                            terms: {\n                              field: \"org\",\n                              order: { _count: \"desc\" },\n                            },\n                          },\n                        },\n                      })}\n                      render={(props) => {\n                        // setSuborgVisible(!!props.value);\n                        return (\n                          <RadioButtonSearchList\n                            dataField=\"org\"\n                            placeholder={t(\"Organization\")}\n                            tagLabel={t(\"Organization\")}\n                            {...props}\n                          />\n                        );\n                      }}\n                      onError={(e) => console.error(e)}\n                    />\n                  )}\n                  {suborgVisible && !channelSelected && (\n                    <ReactiveComponent\n                      componentId=\"suborg\"\n                      filterLabel={t(\"Suborg\")}\n                      URLParams\n                      react={{ and: [\"q\", \"song\", \"artist\", \"isMv\", \"org\"] }}\n                      defaultQuery={() => ({\n                        aggs: {\n                          suborg: {\n                            terms: {\n                              field: \"suborg\",\n                              order: { _count: \"desc\" },\n                            },\n                          },\n                        },\n                      })}\n                      render={(props) => (\n                        <CheckboxSearchList\n                          dataField=\"suborg\"\n                          placeholder={t(\"Suborg name\")}\n                          tagLabel={t(\"Suborg\")}\n                          {...props}\n                        />\n                      )}\n                      onError={(e) => console.error(e)}\n                    />\n                  )}\n                </VStack>\n              </AccordionPanel>\n            </AccordionItem>\n          </Accordion>\n        </VStack>\n        <VStack\n          minW=\"350px\"\n          w=\"50vw\"\n          alignItems=\"stretch\"\n          flexGrow={2}\n          flexShrink={1}\n        >\n          <SelectedFilters\n            clearAllLabel={t(\"Clear filters\")}\n            style={{ minHeight: 35 }}\n          />\n          <ReactiveList\n            componentId=\"results\"\n            dataField=\"name\"\n            react={{\n              and: [\n                \"q\",\n                \"song\",\n                \"artist\",\n                ...(!channelSelected ? [\"org\"] : []),\n                ...(suborgVisible && !channelSelected ? [\"suborg\"] : []),\n                \"isMv\",\n                \"ch\",\n              ],\n            }}\n            URLParams\n            pagination\n            showLoader\n            size={12}\n            sortOptions={sortOptions}\n            defaultSortOption={defaultSortField}\n            innerClass={{\n              sortOptions: \"sort-select\",\n              pagination: \"custom-chakra-button\",\n            }}\n            render={SearchResultSongTable}\n            onQueryChange={(thisQ, next) => {\n              const datafield = Object.keys(next.sort[0])[0];\n              const sort = next.sort[0][datafield].order;\n              setDefaultSort(\n                sortOptions.find(\n                  (x) => x.dataField === datafield && x.sortBy === sort,\n                )?.label || \"unset\",\n              );\n            }}\n          />\n        </VStack>\n      </Flex>\n    </ReactiveBase>\n  );\n}\n","import { useState } from \"react\";\n\n// Hook\nexport function useLocalStorage<T>(key: string, initialValue: T) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    if (typeof window === \"undefined\") {\n      return initialValue;\n    }\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? (JSON.parse(item) as T) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      if (typeof window !== \"undefined\") {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue] as const;\n}\n"],"names":["GeneralSearchInput","debounceValue","placeholder","getQuery","setQuery","value","tagLabel","autoFocus","t","useTranslation","searchText","setSearchText","useState","debouncedSearchText","flush","useDebounce","useEffect","query","changed","useCallback","e","target","colorScheme","size","alignSelf","onSubmit","preventDefault","onChange","color","variant","icon","type","title","CheckboxSearchList","dataField","showSearch","aggregations","filterValue","setFilterValue","checkboxValues","setCheckboxValues","getTermsQuery","values","length","terms","buckets","onClick","maxH","alignItems","overflowY","p","filter","key","toLowerCase","includes","map","RadioButtonSearchList","radioValue","setRadioValue","term","ToggleButtonSearchInput","buttons","buttonValue","setButtonValue","label","rightIcon","currentValue","SearchResultSongTable","data","loading","detailLevel","useBreakpointValue","sm","md","lg","xl","isIndeterminate","visibility","mt","SongTable","songs","rowProps","hideCol","width","flexGrow","Search","sortOptions","useMemo","sortBy","defaultSort","setDefaultSort","initialValue","storedValue","setStoredValue","window","item","localStorage","getItem","JSON","parse","error","console","log","valueToStore","Function","setItem","stringify","useLocalStorage","defaultSortField","find","x","suborgVisible","setSuborgVisible","navigate","useNavigate","channelSelected","setChannelSelected","flexWrap","base","xs","params","useSearchParams","ch","get","org","getGeneralQuery","multi_match","fields","getSongQuery","getArtistQuery","ReactiveBase","className","app","url","location","origin","transformRequest","req","themePreset","setSearchParams","newURL","search","URL","enableAppbase","wrap","minW","px","flexBasis","spacing","mr","ReactiveComponent","componentId","URLParams","filterLabel","customQuery","render","props","onError","allowToggle","defaultIndex","flex","textAlign","react","and","defaultQuery","aggs","field","order","_count","suborg","w","flexShrink","SelectedFilters","clearAllLabel","style","minHeight","ReactiveList","pagination","showLoader","defaultSortOption","innerClass","onQueryChange","thisQ","next","datafield","Object","keys","sort"],"sourceRoot":""}