{"version":3,"file":"static/js/878.d944d88e.chunk.js","mappings":"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","sources":["components/layout/BGImgContainer.tsx","pages/Playlist.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const BGImgContainer = styled.div<{ height: string }>`\n  width: 100%;\n  position: absolute;\n  z-index: 0;\n  pointer-events: none;\n  left: 0px;\n  top: 0px;\n  height: ${({ height }) => height};\n  mask-image: radial-gradient(\n    ellipse farthest-side at 33% 12%,\n    rgba(0, 0, 0, 1) 0%,\n    rgba(0, 0, 0, 0.63) 48%,\n    rgba(0, 0, 0, 0.58) 74%,\n    rgba(0, 0, 0, 0) 100%\n  );\n  mask-size: 150% 132%;\n  mask-position: left bottom;\n  overflow: hidden;\n`;\nexport const BGImg = styled.div<{\n  banner_url: string;\n  height: string;\n  blur?: boolean;\n}>`\n  width: 105%;\n  width: calc(100% + 16px);\n  position: absolute;\n  pointer-events: none;\n  z-index: 0;\n  left: -8px;\n  top: -8px;\n  height: ${({ height }) => height};\n  background: url(${({ banner_url }) => banner_url});\n  background-position: center;\n  background-size: cover;\n  ${({ blur }) => blur && \"filter: blur(8px);\"}\n`;\n","import {\n  Box,\n  Center,\n  Code,\n  Heading,\n  useToast,\n  VStack,\n  Flex,\n  Text,\n} from \"@chakra-ui/react\";\nimport React, {\n  Suspense,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useTranslation } from \"react-i18next\";\nimport { useParams } from \"react-router-dom\";\nimport { QueryStatus } from \"../components/common/QueryStatus\";\nimport { SongTable } from \"../components/data/SongTable\";\nimport { BGImg, BGImgContainer } from \"../components/layout/BGImgContainer\";\nimport { ContainerInlay } from \"../components/layout/ContainerInlay\";\nimport { PageContainer } from \"../components/layout/PageContainer\";\nimport { PlaylistButtonArray } from \"../components/playlist/PlaylistButtonArray\";\nimport { PlaylistHeading } from \"../components/playlist/PlaylistHeading\";\nimport { useClient } from \"../modules/client\";\nimport { useFormatPlaylist } from \"../modules/playlist/useFormatPlaylist\";\nimport {\n  usePlaylist,\n  usePlaylistWriter,\n} from \"../modules/services/playlist.service\";\nimport { useStoreActions } from \"../store\";\nimport { useKeyControl } from \"../utils/HotkeyHook\";\nimport { useSongQueuer } from \"../utils/SongQueuerHook\";\nconst PlaylistHeadingEditor = React.lazy(\n  () => import(\"../components/playlist/PlaylistHeadingEditor\")\n);\nconst SongEditableTable = React.lazy(\n  () => import(\"../components/data/SongTableEditable\")\n);\n\nexport default function Playlist() {\n  const { t } = useTranslation();\n  let params = useParams();\n  let playlistId = params.playlistId!;\n  let { user, isLoggedIn } = useClient();\n\n  const { data: playlist, ...status } = usePlaylist(playlistId);\n\n  const { mutateAsync: writeNewPlaylist } = usePlaylistWriter();\n\n  const [editMode, setEditMode] = useState(false);\n\n  useEffect(() => {\n    setEditMode(false);\n  }, [playlistId]);\n  const formatPlaylist = useFormatPlaylist();\n\n  const { banner, title, description } = useMemo(() => {\n    return (\n      (playlist && {\n        banner: formatPlaylist(\"bannerImage\", playlist),\n        title: formatPlaylist(\"title\", playlist),\n        description: formatPlaylist(\"description\", playlist),\n      }) ||\n      {}\n    );\n  }, [formatPlaylist, playlist]);\n\n  const queueSongs = useSongQueuer();\n  const setPlaylist = useStoreActions(\n    (actions) => actions.playback.setPlaylist\n  );\n\n  useKeyControl(\n    {\n      actions: [\"playPlaylist\"],\n      playlist: playlist,\n    },\n    [playlist]\n  );\n\n  // const bgColor = useColorModeValue(\"bgAlpha.50\", \"bgAlpha.900\");\n\n  // Editing:\n  const [newTitle, setNewTitle] = useState<string | undefined>();\n  const [newDescription, setNewDescription] = useState<string | undefined>();\n  const [newSongIds, setNewSongIds] = useState<string[] | undefined>();\n\n  useEffect(() => {\n    if (!editMode) {\n      setNewTitle(undefined);\n      setNewDescription(undefined);\n      setNewSongIds(undefined);\n    }\n  }, [editMode]);\n\n  const toast = useToast();\n\n  const finishSongEditing = useCallback(\n    async (songIds?: string[], title?: string, desc?: string) => {\n      if (songIds !== undefined || title !== undefined || desc !== undefined) {\n        const newWritable: Partial<WriteablePlaylist> = {\n          ...playlist,\n          content: songIds,\n          title: title !== undefined ? title : playlist?.title,\n          description: desc !== undefined ? desc : playlist?.description,\n        };\n        writeNewPlaylist(newWritable).then(\n          (_) => {\n            //success:\n            toast({\n              variant: \"subtle\",\n              status: \"success\",\n              title: t(\"Saved\"),\n              duration: 1500,\n              position: \"top-right\",\n            });\n            setEditMode(false);\n          },\n          (err) => {\n            toast({\n              variant: \"solid\",\n              status: \"error\",\n              title: t(\"Failed to Save\"),\n              description: err,\n              position: \"top-right\",\n              isClosable: true,\n            });\n            setEditMode(false);\n          }\n        );\n      } else {\n        setEditMode(false);\n      }\n    },\n    [playlist, toast, writeNewPlaylist, t]\n  );\n\n  if (status.error && (status?.error as any)?.status >= 400) {\n    return (\n      <Box pt=\"10vh\" px={6}>\n        <Center role=\"alert\" my={10}>\n          <VStack spacing={4}>\n            <Heading>\n              {t(\n                \"You do not have access to this playlist (or it doesn't exist)\"\n              )}\n            </Heading>\n            <Code>{(status?.error as Error)?.toString()}</Code>\n          </VStack>\n        </Center>\n      </Box>\n    );\n  }\n\n  if (!playlist)\n    return (\n      <QueryStatus queryStatus={status} height=\"100%\" justifyContent=\"center\" />\n    );\n\n  return (\n    <PageContainer>\n      <Helmet>\n        <title>{title || t(\"Untitled Playlist\")} - Musicdex</title>\n      </Helmet>\n      <BGImgContainer height=\"200px\">\n        <BGImg banner_url={banner || \"\"} height=\"200px\"></BGImg>\n      </BGImgContainer>\n      <ContainerInlay mt=\"12\">\n        {editMode ? (\n          <Suspense fallback={<div>{t(\"Loading...\")}</div>}>\n            <PlaylistHeadingEditor\n              title={title || t(\"Untitled Playlist\")}\n              description={description || \"\"}\n              setDescription={(text) => {\n                setNewDescription(text);\n              }}\n              setTitle={(text) => {\n                setNewTitle(text);\n              }}\n              count={newSongIds?.length ?? (playlist?.content?.length || 0)}\n              totalLengthSecs={playlist.content?.reduce(\n                (a, c) => a + c.end - c.start,\n                0\n              )}\n            />\n          </Suspense>\n        ) : (\n          <PlaylistHeading\n            title={title || t(\"Untitled Playlist\")}\n            description={description || \"\"}\n            count={playlist?.content?.length ?? 0}\n            totalLengthSecs={playlist.content?.reduce(\n              (a, c) => a + c.end - c.start,\n              0\n            )}\n            playlist={playlist}\n          />\n        )}\n        <PlaylistButtonArray\n          mb={2}\n          playlist={playlist}\n          canEdit={isLoggedIn && playlist.owner === user?.id}\n          canStar={isLoggedIn && playlist.owner !== user?.id}\n          editMode={editMode}\n          onPlayClick={() => {\n            setPlaylist({ playlist });\n          }}\n          onAddQueueClick={() => {\n            playlist.content &&\n              queueSongs({\n                songs: [...playlist.content],\n                immediatelyPlay: false,\n              });\n          }}\n          onEditClick={() => {\n            setEditMode(true);\n          }}\n          onFinishEditClick={() =>\n            finishSongEditing(newSongIds, newTitle, newDescription)\n          }\n          onAbortEditClick={() => setEditMode(false)}\n        />\n        {playlist.content?.length ? (\n          editMode ? (\n            <Suspense fallback={<div>{t(\"Loading...\")}</div>}>\n              <SongEditableTable\n                songs={playlist.content}\n                songsEdited={setNewSongIds}\n              />\n            </Suspense>\n          ) : (\n            <SongTable playlist={playlist} virtualized />\n          )\n        ) : (\n          <Flex grow={1} align=\"center\" justify=\"center\">\n            <Text fontSize=\"2xl\" color=\"whiteAlpha.500\">\n              {t(\"No Songs\")}\n            </Text>\n          </Flex>\n        )}\n      </ContainerInlay>\n    </PageContainer>\n  );\n}\n"],"names":["BGImgContainer","styled","height","BGImg","banner_url","blur","PlaylistHeadingEditor","React","SongEditableTable","Playlist","t","useTranslation","playlistId","useParams","user","isLoggedIn","useClient","data","playlist","status","usePlaylist","mutateAsync","writeNewPlaylist","usePlaylistWriter","editMode","setEditMode","useState","useEffect","formatPlaylist","useFormatPlaylist","banner","title","description","useMemo","queueSongs","useSongQueuer","setPlaylist","useStoreActions","actions","playback","useKeyControl","newTitle","setNewTitle","newDescription","setNewDescription","newSongIds","setNewSongIds","undefined","toast","useToast","finishSongEditing","useCallback","async","songIds","desc","newWritable","content","then","_","variant","duration","position","err","isClosable","error","pt","px","role","my","spacing","toString","C","mt","Suspense","fallback","setDescription","text","setTitle","count","length","totalLengthSecs","reduce","a","c","end","start","mb","canEdit","owner","id","canStar","onPlayClick","onAddQueueClick","songs","immediatelyPlay","onEditClick","onFinishEditClick","onAbortEditClick","songsEdited","virtualized","grow","align","justify","fontSize","color","queryStatus","justifyContent"],"sourceRoot":""}