{"version":3,"file":"static/js/117.cace435e.chunk.js","mappings":"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","sources":["components/playlist/PlaylistHeadingEditor.tsx"],"sourcesContent":["import {\n  Box,\n  BoxProps,\n  Button,\n  IconButton,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightAddon,\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport emojiMartData from \"@emoji-mart/data/sets/13.1/native.json\";\nimport { intervalToDuration } from \"date-fns\";\nimport { Picker } from \"emoji-mart\";\nimport debounce from \"lodash-es/debounce\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { FiEdit3, FiFolder } from \"react-icons/fi\";\nimport { splitPlaylistEmoji } from \"../../modules/playlist/utils\";\n\ntype PlaylistHeadingEditorProps = {\n  title: string;\n  description: string;\n  setTitle: (text: string | undefined) => void;\n  setDescription: (text: string | undefined) => void;\n  count: number;\n  totalLengthSecs?: number;\n  max?: number;\n};\n\nexport default function PlaylistHeadingEditor({\n  title,\n  description,\n  setTitle,\n  setDescription,\n  count,\n  totalLengthSecs,\n  max = 500,\n  ...props\n}: PlaylistHeadingEditorProps & BoxProps) {\n  const descColor = useColorModeValue(\"gray.800\", \"gray.200\");\n\n  const { emoji, rest } = useMemo(() => {\n    return splitPlaylistEmoji(title);\n  }, [title]);\n\n  const [editTitle, setEditTitle] = useState(false);\n  const [editDescription, setEditDescription] = useState(false);\n\n  const [changedEmoji, changeEmoji] = useState<string | undefined>();\n  const [changedTitle, changeTitle] = useState<string | undefined>();\n\n  const [titleInvalid, setTitleInvalid] = useState(false);\n  const [descInvalid, setDescInvalid] = useState(false);\n\n  useEffect(() => {\n    const finalTitle = `${changedEmoji ?? emoji ?? \"\"}${changedTitle ?? rest}`;\n    if (changedEmoji !== undefined || changedTitle !== undefined) {\n      setTitle(finalTitle);\n    } else {\n      setTitle(undefined);\n    }\n  }, [setTitle, emoji, rest, changedEmoji, changedTitle]);\n\n  const emojiMartRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    if (editTitle) {\n      const p = new Picker({\n        ref: emojiMartRef,\n        data: emojiMartData,\n        categories: [\n          \"custom_1\",\n          \"frequent\",\n          ...emojiMartData.categories.map((c) => c.id),\n        ],\n        custom: [\n          {\n            name: \"Clear Emoji\",\n            emojis: [\n              {\n                id: \"clear-emoji\",\n                name: \"Clear Emoji\",\n                keywords: [\"null\", \"empty\", \"clear\"],\n                skins: [\n                  {\n                    native: \"-\",\n                  },\n                ],\n                version: 1,\n              },\n            ],\n          },\n        ],\n        theme: \"dark\",\n        maxFrequentRows: 0,\n        onEmojiSelect: (s: any) => {\n          changeEmoji(s.id === \"clear-emoji\" ? \"\" : s.native);\n        },\n      });\n      return () => {\n        p.remove();\n      };\n    }\n  }, [editTitle]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const titleChangeHandler = useCallback(\n    debounce((text: string) => {\n      const valid = isValid(text, 1, 70);\n      setTitleInvalid(!valid);\n      changeTitle(valid ? text : undefined);\n    }, 300),\n    []\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const descChangeHandler = useCallback(\n    debounce((text: string) => {\n      const valid = isValid(text, 0, 200);\n      setDescInvalid(!valid);\n      setDescription(valid ? text : undefined);\n    }, 300),\n    [setDescription]\n  );\n\n  const isValid = (t: string, min: number, max: number) =>\n    t.length > min && t.length < max;\n\n  const durationString = useMemo(() => {\n    if (!totalLengthSecs) return \"\";\n    const duration = intervalToDuration({\n      start: 0,\n      end: totalLengthSecs * 1000,\n    });\n    const hr = duration.hours ? duration.hours + \"hr\" : \"\";\n    return `${hr} ${duration.minutes}m`;\n  }, [totalLengthSecs]);\n\n  return (\n    <Box as={\"header\"} mb=\"2\" position=\"relative\" {...props}>\n      <Text\n        lineHeight={1.1}\n        fontWeight={600}\n        fontSize={{ base: \"2xl\", sm: \"3xl\", md: \"4xl\", lg: \"5xl\" }}\n        as={\"div\"}\n      >\n        {editTitle ? (\n          <InputGroup colorScheme={titleInvalid ? \"red\" : \"brand\"} size={\"lg\"}>\n            <InputLeftElement>\n              <Popover>\n                <PopoverTrigger>\n                  <Button variant=\"ghost\">\n                    {(changedEmoji ?? emoji ?? \"\") || <FiFolder />}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent\n                  bg=\"transparent\"\n                  border=\"none\"\n                  ref={emojiMartRef}\n                />\n              </Popover>\n            </InputLeftElement>\n            <Input\n              placeholder=\"Playlist Title\"\n              autoFocus\n              defaultValue={rest}\n              isInvalid={titleInvalid}\n              onChange={(e) => titleChangeHandler(e.currentTarget.value)}\n            />\n            {titleInvalid && <InputRightAddon color=\"red\" children=\"1~70\" />}\n          </InputGroup>\n        ) : (\n          title\n        )}\n        <IconButton\n          display={!editTitle ? \"inline-block\" : \"none\"}\n          onClick={() => {\n            setEditTitle(true);\n          }}\n          ml={2}\n          size=\"lg\"\n          verticalAlign=\"baseline\"\n          aria-label=\"edit title\"\n          variant=\"link\"\n          icon={<FiEdit3 />}\n        ></IconButton>\n      </Text>\n      <Text\n        color={descColor}\n        opacity={0.6}\n        fontSize={{ base: \"lg\", md: \"xl\" }}\n        as={\"div\"}\n      >\n        {editDescription ? (\n          <InputGroup colorScheme={descInvalid ? \"red\" : \"brand\"}>\n            <Input\n              placeholder=\"Playlist Description\"\n              defaultValue={description}\n              isInvalid={descInvalid}\n              onChange={(e) => descChangeHandler(e.currentTarget.value)}\n            />\n            {descInvalid && <InputRightAddon color=\"red\" children=\"0~200\" />}\n          </InputGroup>\n        ) : (\n          <span>{description}</span>\n        )}\n        <IconButton\n          display={!editDescription ? \"inline\" : \"none\"}\n          verticalAlign=\"middle\"\n          onClick={() => {\n            setEditDescription(true);\n          }}\n          ml={2}\n          aria-label=\"edit title\"\n          variant=\"link\"\n          icon={<FiEdit3 />}\n        ></IconButton>{\" \"}\n        <Text color=\"bg.200\" float=\"right\" fontSize={\"xl\"}>\n          {count > 0 ? `${count} songs` : \"\"}\n          {durationString ? ` • ${durationString}` : \"\"}\n        </Text>\n      </Text>\n    </Box>\n  );\n}\n"],"names":["PlaylistHeadingEditor","title","description","setTitle","setDescription","count","totalLengthSecs","max","props","descColor","useColorModeValue","emoji","rest","useMemo","splitPlaylistEmoji","editTitle","setEditTitle","useState","editDescription","setEditDescription","changedEmoji","changeEmoji","changedTitle","changeTitle","titleInvalid","setTitleInvalid","descInvalid","setDescInvalid","useEffect","finalTitle","undefined","emojiMartRef","useRef","p","Picker","ref","data","emojiMartData","categories","c","id","custom","name","emojis","keywords","skins","native","version","theme","maxFrequentRows","onEmojiSelect","s","remove","titleChangeHandler","useCallback","debounce","text","valid","isValid","descChangeHandler","t","min","length","durationString","duration","intervalToDuration","start","end","hours","minutes","as","mb","position","lineHeight","fontWeight","fontSize","base","sm","md","lg","colorScheme","size","variant","bg","border","placeholder","autoFocus","defaultValue","isInvalid","onChange","e","currentTarget","value","color","children","display","onClick","ml","verticalAlign","icon","opacity","float"],"sourceRoot":""}